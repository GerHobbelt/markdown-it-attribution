{"version":3,"file":"markdownItAttribution.modern.js","sources":["../index.js"],"sourcesContent":["\n\n\n\nexport default function attributionPlugin(md, options) {\n  /**\n   * A regular expression matching common URL patterns.\n   *\n   * @see {@link https://mathiasbynens.be/demo/url-regex}\n   *\n   * @type {RegExp}\n   */\n  let REGEX_URL = /https?:\\/\\/[^\\s/$.?#()].[^\\s()]*/i;\n\n  /**\n   * An enumeration of token types.\n   *\n   * @type {Object<string,string>}\n   */\n  let TokenType = {\n    BLOCKQUOTE_OPEN: 'blockquote_open',\n    BLOCKQUOTE_CLOSE: 'blockquote_close'\n  };\n\n  /**\n   * Default options of the parser plugin.\n   *\n   * @type {Object}\n   */\n  let Defaults = {\n    classNameContainer: 'c-blockquote',\n    classNameAttribution: 'c-blockquote__attribution',\n    marker: 'â€”', // EM dash\n    removeMarker: true\n  };\n\n  /**\n   * Copy the values of all enumerable own properties from a source object to a\n   * target object.\n   *\n   * @type {Function}\n   */\n  let assign = md.utils.assign;\n\n  /**\n   * Prepare the plugin options and merge user options with the defauls.\n   *\n   * @type {Object}\n   */\n  options = assign({}, Defaults, options);\n\n  /**\n   * Determine whether the given value is an integer.\n   *\n   * @param {*} value The value to inspect.\n   * @return {Boolean}\n   */\n  function isInteger(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n  }\n\n  /**\n   * Determine whether a given string is empty.\n   *\n   * @param {string} str The string to inspect.\n   * @return {Boolean}\n   */\n  function isEmpty(str) {\n    return !str || (str.length === 0) || (str.trim().length === 0);\n  }\n\n  /**\n   * Determine whether the given property exists.\n   *\n   * @param {Object} obj The object to inspect.\n   * @param {string} prop The property to test for.\n   * @return {Boolean}\n   */\n  function has(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  }\n\n  /**\n   * Extract an url from the given string.\n   *\n   * @param {string} str The string to extract an url from.\n   * @return {string}\n   */\n  function extractUrl(str) {\n    let matches = str.match(REGEX_URL);\n    return matches !== null\n      ? matches.shift()\n      : null;\n  }\n\n  /**\n   * Determines whether a string begins with the characters of a another string.\n   *\n   * @param {string} str The string to inspect.\n   * @param {string} needle The string to search for.\n   * @return {Boolean}\n   */\n  function startsWith(str, needle) {\n    return str.slice(0, needle.length) === needle;\n  }\n\n  /**\n   * Remove whitespace from the beginning of a string.\n   *\n   * @param {string} str The string to trim.\n   * @return {string}\n   */\n  function trimStart(str) {\n    return str.replace(/^\\s+/, '');\n  }\n\n  /**\n   * Remove whitespace from the end of a string.\n   *\n   * @param {string} str The string to trim.\n   * @return {string}\n   */\n  function trimEnd(str) {\n    return str.replace(/\\s+$/, '');\n  }\n\n  /**\n   * Insert multiple items at the given index position.\n   *\n   * @param {Array} array The array to add items to.\n   * @param {Object[]} items One or multiple items to add.\n   * @param {Number} position The index position at which to add the items.\n   */\n  function insertAt(array, items, position) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      array.splice(position + i, 0, items[i]);\n    }\n  }\n\n  /**\n   * Remove all items between the given indices.\n   *\n   * @param {Array} array The array to remove items from.\n   * @param {Number} [from=0] The index to start from.\n   * @param {Number} [to=array.length-1] The index at which to stop deletion.\n   * @return {Number}\n   */\n  function remove(array, from, to) {\n    from = isInteger(from) ? from : 0;\n    to = isInteger(to) ? to : array.length - 1;\n\n    let amount = to - from;\n    let items = array.splice(from, amount);\n\n    return items.length;\n  }\n\n  /**\n   * Determine whether the given object has equal property values.\n   *\n   * @param {Object} obj The object to inspect.\n   * @param {Object} props The collection of property values to test.\n   * @return {Boolean}\n   */\n  function matches(obj, props) {\n    for (let prop in props) {\n      if (has(props, prop) && (props[prop] !== obj[prop])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Find the index of the first token that has equal property values.\n   *\n   * @param {MarkdownIt.Token[]} tokens A token stream to search within.\n   * @param {Object<string,*>} props A collection of key<->value pairs to match against.\n   * @param {Number} [position=0] The start index to start searching from.\n   * @return {Number}\n   */\n  function findToken(tokens, props, position) {\n    position = isInteger(position) ? position : 0;\n\n    for (let i = position, l = tokens.length; i < l; i++) {\n      if (matches(tokens[i], props)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Find the index position of a given marker in a string.\n   *\n   * NOTE: An attribution marker either has to be the first character of a\n   * string or it has to be immediately following a soft break/line break.\n   *\n   * @param {string} str The string to search within.\n   * @param {string} marker The marker to search for.\n   * @return {Number}\n   */\n  function findMarker(str, marker) {\n    // Return early if the paragraph starts with the marker.\n    if (startsWith(str, marker)) {\n      return 0;\n    }\n\n    // Search for the marker following a soft break.\n    let length = marker.length;\n    let position = str.indexOf('\\n' + marker, length + 1);\n\n    return (position > length) ? position + 1 : -1;\n  }\n\n  /**\n   * Find a attribution line within the given range.\n   *\n   * @param {MarkdownIt.Token[]} tokens The token stream to search.\n   * @param {string} marker The character code of the attribution marker.\n   * @param {Number} [level=0] The level of the block quote.\n   * @param {Number} [from=0] The index position to start searching from.\n   * @param {Number} [to=tokens.length-1] The upper boundary to stop searching.\n   * @return {Number}\n   */\n  function findAttribution(tokens, marker, level, from, to) {\n    level = isInteger(level) ? level : 0;\n    from = isInteger(from) ? from : 0;\n    to = isInteger(to) ? to : tokens.length;\n\n    for (let i = from; i < to; i++) {\n      let token = tokens[i];\n      let content = token.content;\n\n      if ((token.type !== 'inline') || (token.level !== level + 2) || (content.length === 0)) {\n        continue;\n      }\n\n      let position = findMarker(content, marker);\n\n      if (position !== -1) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Attribution Rule\n   *\n   * Improve the generated HTML markup for block quotes with proper attribution\n   * syntax.\n   *\n   * @param {MarkdownIt.StateCore} state The current state of the parser.\n   * @return {void}\n   */\n  function rule(state) {\n    let tokens = state.tokens;\n\n    for (let i = 0, l = tokens.length; i < l; i++) {\n      // Find the opening tag of the next blockquote.\n      let start = findToken(tokens, { type: TokenType.BLOCKQUOTE_OPEN }, i);\n\n      if (start === -1) {\n        continue;\n      }\n\n      // Find the closing tag of the current block quote.\n      let level = tokens[start].level;\n      let end = findToken(tokens, { type: TokenType.BLOCKQUOTE_CLOSE, level: level }, start + 1);\n\n      /* istanbul ignore if */\n      if (end === -1) {\n        continue;\n      }\n\n      // Find the attribution line of the current block quote.\n      let position = findAttribution(tokens, options.marker, level, start + 1, end);\n\n      if (position === -1) {\n        continue;\n      }\n\n      // Increase the level of each block quote token as it will be wrapped in a\n      // container element.\n      for (let j = start; j <= end; j++) {\n        tokens[j].level++;\n      }\n\n      // Remove the attribution line from the rest of the paragraph.\n      let token = tokens[position];\n      let source = token.content;\n      let index = findMarker(source, options.marker);\n\n      let content = (index > 0) ? trimEnd(source.slice(0, index)) : null;\n      let attribution = (index > 0) ? source.slice(index) : source;\n\n      token.content = content;\n\n      // Remove the paragraph tokens from the stream, if no content is left.\n      if (isEmpty(content)) {\n        end -= remove(tokens, position - 1, position + 2);\n      }\n\n      // Use any url found in the attribution line as the cite attribute.\n      let blockquoteOpen = tokens[start];\n      let url = extractUrl(attribution);\n\n      if (!isEmpty(url)) {\n        blockquoteOpen.attrSet('cite', url);\n      }\n\n      // Create new tokens for the attribution line.\n      let captionOpen = new state.Token('blockquote_attribution_open', 'figcaption', 1);\n      captionOpen.block = true;\n      captionOpen.level = level + 1;\n\n      let caption = new state.Token('inline', '', 0);\n      caption.children = [];\n      caption.level = level + 2;\n      caption.content = options.removeMarker\n        ? trimStart(attribution.slice(options.marker.length))\n        : attribution;\n\n      let captionClose = new state.Token('blockquote_attribution_close', 'figcaption', -1);\n      captionClose.block = true;\n      captionClose.level = level + 1;\n\n      if (!isEmpty(options.classNameAttribution)) {\n        captionOpen.attrSet('class', options.classNameAttribution);\n      }\n\n      insertAt(tokens, [ captionOpen, caption, captionClose ], end + 1);\n\n      // Wrap block quote and attribution in a figure element.\n      let figureOpen = new state.Token('blockquote_container_open', 'figure', 1);\n      figureOpen.block = true;\n      figureOpen.level = level;\n\n      let figureClose = new state.Token('blockquote_container_close', 'figure', -1);\n      figureClose.block = true;\n      figureClose.level = level;\n\n      if (!isEmpty(options.classNameContainer)) {\n        figureOpen.attrSet('class', options.classNameContainer);\n      }\n\n      insertAt(tokens, [ figureClose ], end + 4);\n      insertAt(tokens, [ figureOpen ], start);\n\n      // Skip the generated block quote tokens in the stream.\n      i = end + 5;\n\n      // Update the length of the token stream.\n      l += 4;\n    }\n  }\n\n  md.core.ruler.after('block', 'attribution', rule);\n}\n"],"names":["attributionPlugin","md","options","REGEX_URL","TokenType","BLOCKQUOTE_OPEN","BLOCKQUOTE_CLOSE","Defaults","classNameContainer","classNameAttribution","marker","removeMarker","assign","utils","isInteger","value","isFinite","Math","floor","isEmpty","str","length","trim","has","obj","prop","Object","prototype","hasOwnProperty","call","extractUrl","matches","match","shift","startsWith","needle","slice","trimStart","replace","trimEnd","insertAt","array","items","position","i","l","splice","remove","from","to","amount","props","findToken","tokens","findMarker","indexOf","findAttribution","level","token","content","type","rule","state","start","end","j","source","index","attribution","blockquoteOpen","url","attrSet","captionOpen","Token","block","caption","children","captionClose","figureOpen","figureClose","core","ruler","after"],"mappings":"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"}